<?php

declare(strict_types=1);

namespace App\Tests\Controller;

use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use App\Controller\NurseController;
use App\Repository\NurseRepository;
use App\Entity\Nurse;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

final class NurseControllerTest extends TestCase
{
    private function makeController($repoMock, $emMock): NurseController
    {
        $controller = new NurseController($repoMock, $emMock);
        // AbstractController requires a container; provide a minimal mock to avoid typed property errors
        $container = $this->createMock(ContainerInterface::class);
        $controller->setContainer($container);
        return $controller;
    }

    public function testFindByNameFound(): void
    {
    $nurse = new Nurse();
    $nurse->setName('Alice');
    $nurse->setEmail('alice@example.com');
    $nurse->setPassword('secret');

        $repo = $this->createMock(NurseRepository::class);
        $repo->expects($this->once())
             ->method('findByName')
             ->with('Alice')
             ->willReturn($nurse);

        $em = $this->createMock(EntityManagerInterface::class);
        $controller = $this->makeController($repo, $em);

        $response = $controller->findByName('Alice');
        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());

        $payload = json_decode($response->getContent(), true);
        $this->assertArrayHasKey('nurse', $payload);
        $this->assertCount(1, $payload['nurse']);
        $this->assertEquals('Alice', $payload['nurse'][0]['name']);
    }

    public function testGetAllReturnsList(): void
    {
    $n1 = new Nurse(); $n1->setName('A'); $n1->setEmail('a@e'); $n1->setPassword('p1');
    $n2 = new Nurse(); $n2->setName('B'); $n2->setEmail('b@e'); $n2->setPassword('p2');
    // set ids via reflection because they are private and generated by doctrine normally
    $ref = new \ReflectionClass($n1);
    $prop = $ref->getProperty('id'); $prop->setAccessible(true); $prop->setValue($n1, 1);
    $ref2 = new \ReflectionClass($n2);
    $prop2 = $ref2->getProperty('id'); $prop2->setAccessible(true); $prop2->setValue($n2, 2);

        $repo = $this->createMock(NurseRepository::class);
        $repo->method('findAll')->willReturn([$n1, $n2]);

        $em = $this->createMock(EntityManagerInterface::class);
        $controller = $this->makeController($repo, $em);

        $response = $controller->getAll();
        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());

        $data = json_decode($response->getContent(), true);
        $this->assertCount(2, $data);
        $this->assertEquals(1, $data[0]['id']);
        $this->assertEquals('B', $data[1]['name']);
    }

    public function testLoginWithFormDataSuccessAndFailure(): void
    {
    $n = new Nurse(); $n->setEmail('u@e'); $n->setPassword('pwd');

        $repo = $this->createMock(NurseRepository::class);
        $repo->method('findByEmail')->willReturn([$n]);

        $em = $this->createMock(EntityManagerInterface::class);
        $controller = $this->makeController($repo, $em);

        // Success via form data
        $req = new Request([], ['email' => 'u@e', 'password' => 'pwd']);
        $resp = $controller->login($req);
        $this->assertEquals(Response::HTTP_OK, $resp->getStatusCode());
        $this->assertEquals(true, json_decode($resp->getContent(), true)['success']);

        // Failure via JSON body
        $req2 = new Request([], [], [], [], [], [], json_encode(['email' => 'u@e', 'password' => 'wrong']));
        $resp2 = $controller->login($req2);
        $this->assertEquals(Response::HTTP_UNAUTHORIZED, $resp2->getStatusCode());
        $this->assertEquals(false, json_decode($resp2->getContent(), true)['success']);
    }

    public function testFindByIDFoundAndNotFound(): void
    {
    $n = new Nurse(); $n->setName('X');
    $ref = new \ReflectionClass($n); $prop = $ref->getProperty('id'); $prop->setAccessible(true); $prop->setValue($n, 5);

        $repoFound = $this->createMock(NurseRepository::class);
        $repoFound->method('find')->with(5)->willReturn($n);

        $repoNotFound = $this->createMock(NurseRepository::class);
        $repoNotFound->method('find')->with(999)->willReturn(null);

        $em = $this->createMock(EntityManagerInterface::class);
        $controller = $this->makeController($repoFound, $em);

        $resp = $controller->findByID('5', $repoFound);
        $this->assertEquals(Response::HTTP_OK, $resp->getStatusCode());
        $payload = json_decode($resp->getContent(), true);
        $this->assertArrayHasKey('success', $payload);

        $resp2 = $controller->findByID('999', $repoNotFound);
        $this->assertEquals(Response::HTTP_NOT_FOUND, $resp2->getStatusCode());
    }

    public function testCreateSuccessAndEmailExists(): void
    {
        $repo = $this->createMock(NurseRepository::class);
        // First call: findByEmail return empty -> success
        $repo->expects($this->atLeastOnce())
             ->method('findByEmail')
             ->willReturnOnConsecutiveCalls([], ['exists@example.com']);

        $em = $this->createMock(EntityManagerInterface::class);
        $em->expects($this->once())->method('persist');
        $em->expects($this->once())->method('flush');

        $controller = $this->makeController($repo, $em);

        $req = new Request([], [], [], [], [], [], json_encode(['name'=>'New','email'=>'new@example.com','password'=>'p']));
        $resp = $controller->create($req, $em);
        $this->assertEquals(Response::HTTP_CREATED, $resp->getStatusCode());
        $body = json_decode($resp->getContent(), true);
        $this->assertEquals('Nurse created', $body['message']);

        // Now simulate email exists -> bad request
        $req2 = new Request([], [], [], [], [], [], json_encode(['name'=>'X','email'=>'exists@example.com','password'=>'p']));
        $resp2 = $controller->create($req2, $em);
        $this->assertEquals(Response::HTTP_BAD_REQUEST, $resp2->getStatusCode());
    }

    public function testUpdateByIDSuccessAndNotFound(): void
    {
    $n = new Nurse(); $n->setName('Old'); $n->setEmail('e@e');
    $ref = new \ReflectionClass($n); $prop = $ref->getProperty('id'); $prop->setAccessible(true); $prop->setValue($n, 10);

        $repo = $this->createMock(NurseRepository::class);
        $repo->method('find')->willReturnCallback(function ($id) use ($n) {
            return intval($id) === 10 ? $n : null;
        });

        $em = $this->createMock(EntityManagerInterface::class);
        $em->expects($this->once())->method('flush');

        $controller = $this->makeController($repo, $em);

        $req = new Request([], [], [], [], [], [], json_encode(['name' => 'NewName']));
        $resp = $controller->updateByID($req, 10);
        $this->assertEquals(Response::HTTP_OK, $resp->getStatusCode());
        $body = json_decode($resp->getContent(), true);
        $this->assertEquals('NewName', $body['nurse']['name']);

        // Not found
        $repoNot = $this->createMock(NurseRepository::class);
        $repoNot->method('find')->with(999)->willReturn(null);
        $controller2 = $this->makeController($repoNot, $em);
        $req2 = new Request([], [], [], [], [], [], json_encode(['name' => 'X']));
        $resp2 = $controller2->updateByID($req2, 999);
        $this->assertEquals(Response::HTTP_NOT_FOUND, $resp2->getStatusCode());
    }

    public function testDeleteByIDSuccessAndNotFound(): void
    {
    $n = new Nurse(); $n->setName('Del'); $n->setEmail('del@e');
    $ref = new \ReflectionClass($n); $prop = $ref->getProperty('id'); $prop->setAccessible(true); $prop->setValue($n, 7);

        $repo = $this->createMock(NurseRepository::class);
        $repo->method('find')->willReturnCallback(fn($id) => $id === '7' || $id === 7 ? $n : null);

        $em = $this->createMock(EntityManagerInterface::class);
        $em->expects($this->once())->method('remove')->with($n);
        $em->expects($this->once())->method('flush');

        $controller = $this->makeController($repo, $em);

        $resp = $controller->deleteByID('7', $em);
        $this->assertEquals(Response::HTTP_OK, $resp->getStatusCode());
        $body = json_decode($resp->getContent(), true);
        $this->assertEquals('Nurse with ID 7 successfully deleted!', $body['message']);

        // Not found
        $resp2 = $controller->deleteByID('999', $em);
        $this->assertEquals(Response::HTTP_NOT_FOUND, $resp2->getStatusCode());
    }
}
